version: '3.6'

services:
    cas-traefik:
        build: ./traefik
        image: hl-cas/cas-traefik
        container_name: cas-traefik
        environment:
            - TZ=${TZ}
        volumes:
            - ./traefik/traefik.toml:/etc/traefik/traefik.toml
            - ./traefik/acme:/etc/traefik/acme
            - /var/run/docker.sock:/var/run/docker.sock
            - ./traefik/log:/log/
        ports:
            - "8080:8080"
            - "80:80"
            - "443:443"
        networks:
            - ${DOCKER_NETWORK_NAME}

# to check config run following
# docker exec -it cas-ldap ldapsearch -x -H ldaps://cas-ldap -b ou=users,dc=hl,dc=ygubler,dc=ch -D "cn=admin,dc=hl,dc=ygubler,dc=ch" -w bHLldap18
# docker exec -it cas-ldap ldapsearch -x -ZZ -H ldap://cas-ldap -b ou=users,dc=hl,dc=ygubler,dc=ch -D "cn=admin,dc=hl,dc=ygubler,dc=ch" -w bHLldap18
    cas-ldap:
        build: ./ldap
        image : hl-cas/cas-ldap
        container_name: cas-ldap
        environment:
            TZ: ${TZ}
            LDAP_LOG_LEVEL: "256"
        command: ["--loglevel=info"]
        volumes:
            - ./ldap/config:/var/lib/ldap
            - ./ldap/database:/etc/ldap/slapd.d
            - ./ldap/certs:/container/service/slapd/assets/certs
        ports:
            - "636:636"
        domainname: "${CAS_LDAP_HOSTNAME}" # important: same as hostname
        hostname: "${CAS_LDAP_HOSTNAME}"
        networks:
            - ${DOCKER_NETWORK_NAME}

    cas-phpldapadmin:
        image: osixia/phpldapadmin:latest
        container_name: cas-phpldapadmin
        environment:
            LDAP_HOSTS: cas-ldap
            PHPLDAPADMIN_LDAP_CLIENT_TLS_REQCERT: never
            PHPLDAPADMIN_HTTPS: "true"
            PHPLDAPADMIN_LDAP_CLIENT_TLS_CA_CRT_FILENAME: ldap-ca.crt
            PHPLDAPADMIN_LDAP_HOSTS: "#PYTHON2BASH:[
                {'cas-ldap': [
                    {'server': [{'tls': True}]},
                    {'login': [{'bind_id': '${CAS_PHPLDAPADMIN_BIND_ID}'}]}
                ]},
                'ldap2.example.org',
                'ldap3.example.org'
                ]"
        depends_on:
            - cas-ldap
        command: ["--loglevel=debug"]
        volumes:
            - ./ldap/certs/ca.crt:/container/service/ldap-client/assets/certs/ldap-ca.crt
        labels:
            - "traefik.enable=true"
            - "traefik.port=443"
            - "traefik.frontend.rule=Host:${ADDRESS_PHPLDAPADMIN}"
            - "traefik.protocol=https"
        networks:
            - ${DOCKER_NETWORK_NAME}

    cas-keycloak:
        build: ./keycloak
        image: hl-cas/cas-keycloak
        container_name: cas-keycloak
        depends_on:
            - cas-keycloak-mysql
        environment:
            - TZ=${TZ}
            - KEYCLOAK_USER=${KEYCLOAK_USER}
            - KEYCLOAK_PASSWORD=DOCKERSECRET:keycloak_password
            - DB_VENDOR=MYSQL
            - DB_ADDR=cas-keycloak-mysql
            - DB_DATABASE=${KEYCLOAK_MYSQL_DATABASE}
            - DB_USER=${KEYCLOAK_DATABASE_USERNAME}
            - DB_PASSWORD=DOCKERSECRET:keycloak_database_password
            - KEYCLOAK_LOGLEVEL=DEBUG
            - ENV_SECRETS_DEBUG=${ENV_SECRETS_DEBUG}
        volumes:
            - ./keycloak/themes/:/opt/jboss/keycloak/themes/
            - ./keycloak/export/:/export
            - ./ldap/certs/ca.crt:/opt/jboss/ldap-ca.crt
        networks:
            - ${DOCKER_NETWORK_NAME}
        labels:
            - "traefik.enable=true"
            - "traefik.port=8443"
            - "traefik.frontend.rule=Host:${ADDRESS_KEYCLOAK}"
            - "traefik.protocol=https"
            - "traefik.frontend.headers.customResponseHeaders=${CUSTOM_RESPONSE_HEADERS_CAS_KEYCLOAK}"
        command: ["-b", "0.0.0.0",
                  "-bmanagement", "0.0.0.0",
                  "-Dkeycloak.migration.action=${KEYCLOAK_MIGRATION_ACTION}",
                  "-Dkeycloak.migration.provider=dir",
                  "-Dkeycloak.migration.dir=/export"
                 ]
        secrets:
            - keycloak_password
            - keycloak_database_password

    cas-keycloak-mysql:
        build: ./keycloak-mysql
        image: hl-cas/cas-keycloak-mysql
        container_name: cas-keycloak-mysql
        volumes:
            - ${KEYCLOAK_DATABASE_PATH}:/var/lib/mysql
        environment:
            - TZ=${TZ}
            - MYSQL_DATABASE=${KEYCLOAK_MYSQL_DATABASE}
            - MYSQL_ROOT_PASSWORD=/run/secrets/keycloak_mysql_root_password
            - ENV_SECRETS_DEBUG=${ENV_SECRETS_DEBUG}
        networks:
            - ${DOCKER_NETWORK_NAME}
        secrets:
            - keycloak_mysql_root_password

    proxy-cas-server :
        build: ./keycloak-proxy
        image: hl-cas/keycloak-auth-proxy-golang
        container_name: proxy-cas-server
        restart: on-failure
        depends_on:
            - cas-keycloak
        environment:
            - PROXY_LISTEN=${KEYCLOAK_PROXY_LISTEN}
            - PROXY_DISCOVERY_URL=${SERVER_PROTOCOL}://${ADDRESS_KEYCLOAK}${KEYCLOAK_PROXY_DISCOVERY_URL_PATH}
            - PROXY_CLIENT_ID=${KEYCLOAK_PROXY_CAS_SERVER_CLIENT_ID}
            - PROXY_CLIENT_SECRET=DOCKERSECRET:keycloak_proxy_cas_server_client_secret
            - PROXY_ENABLE_REFRESH_TOKEN=${KEYCLOAK_PROXY_ENABLE_REFRESH_TOKEN}
            - PROXY_REDIRECTION_URL=${SERVER_PROTOCOL}://${ADDRESS_CAS_SERVER}
            - PROXY_ENCRYPTION_KEY=DOCKERSECRET:keycloak_proxy_cas_server_encryption_key
            - PROXY_UPSTREAM_URL=http://run-cas-server:${INTERNAL_PORT_RUN_CAS_SERVER}
            - ENV_SECRETS_DEBUG=${ENV_SECRETS_DEBUG}
        volumes:
            - ./keycloak-proxy/configs/proxy-cas-server-cors-config.yml:/config.yml
        networks:
            - ${DOCKER_NETWORK_NAME}
        labels:
            - "traefik.enable=true"
            - "traefik.port=${KEYCLOAK_PROXY_PORT}"
            - "traefik.frontend.rule=Host:${ADDRESS_CAS_SERVER}"
        entrypoint:
            - /opt/env_secrets_expand.sh
            - --resources=${KEYCLOAK_PROXY_CAS_SERVER_RESOURCES}
            - --skip-openid-provider-tls-verify=${KEYCLOAK_PROXY_SKIP_OPENID_PROVIDER_TLS_VERIFY}
            - --skip-client-id=${KEYCLOAK_PROXY_SKIP_CLIENT_ID}
            - --enable-encrypted-token=${KEYCLOAK_PROXY_ENABLE_ENCRYPTED_TOKEN}
            - --enable-logging=${KEYCLOAK_PROXY_ENABLE_LOGGING}
            - --upstream-timeout 20s
            - --upstream-keepalive-timeout 20s
            - --upstream-response-header-timeout 20s
            - --server-read-timeout 20s
            - --server-write-timeout 20s
            - --server-idle-timeout 5m0s
            - --config=/config.yml
        secrets:
            - keycloak_proxy_cas_server_client_secret
            - keycloak_proxy_cas_server_encryption_key

    proxy-cas-client :
        build: ./keycloak-proxy
        image: hl-cas/keycloak-auth-proxy-golang
        container_name: proxy-cas-client
        restart: on-failure
        depends_on:
            - cas-keycloak
        environment:
            - PROXY_LISTEN=${KEYCLOAK_PROXY_LISTEN}
            - PROXY_DISCOVERY_URL=${SERVER_PROTOCOL}://${ADDRESS_KEYCLOAK}${KEYCLOAK_PROXY_DISCOVERY_URL_PATH}
            - PROXY_CLIENT_ID=${KEYCLOAK_PROXY_CAS_CLIENT_CLIENT_ID}
            - PROXY_CLIENT_SECRET=DOCKERSECRET:keycloak_proxy_cas_client_client_secret
            - PROXY_ENABLE_REFRESH_TOKEN=${KEYCLOAK_PROXY_ENABLE_REFRESH_TOKEN}
            - PROXY_REDIRECTION_URL=${SERVER_PROTOCOL}://${ADDRESS_CAS_CLIENT}/
            - PROXY_ENCRYPTION_KEY=DOCKERSECRET:keycloak_proxy_cas_client_encryption_key
            - PROXY_UPSTREAM_URL=http://run-cas-client:${INTERNAL_PORT_RUN_CAS_CLIENT}
            - ENV_SECRETS_DEBUG=${ENV_SECRETS_DEBUG}
        volumes:
            - ./keycloak-proxy/configs/proxy-cas-client-cors-config.yml:/config.yml    
        networks:
            - ${DOCKER_NETWORK_NAME}
        labels:
            - "traefik.enable=true"
            - "traefik.port=${KEYCLOAK_PROXY_PORT}"
            - "traefik.frontend.rule=Host:${ADDRESS_CAS_CLIENT}"
        entrypoint:
            - /opt/env_secrets_expand.sh
            - --resources=${KEYCLOAK_PROXY_CAS_CLIENT_RESOURCES}
            - --skip-openid-provider-tls-verify=${KEYCLOAK_PROXY_SKIP_OPENID_PROVIDER_TLS_VERIFY}
            - --skip-client-id=${KEYCLOAK_PROXY_SKIP_CLIENT_ID}
            - --enable-encrypted-token=${KEYCLOAK_PROXY_ENABLE_ENCRYPTED_TOKEN}
            - --enable-logging=${KEYCLOAK_PROXY_ENABLE_LOGGING}
            - --config=/config.yml
        secrets:
            - keycloak_proxy_cas_client_client_secret
            - keycloak_proxy_cas_client_encryption_key

    proxy-consumer :
        build: ./keycloak-proxy
        image: hl-cas/keycloak-auth-proxy-golang
        container_name: proxy-consumer
        restart: on-failure
        depends_on:
            - cas-keycloak
        environment:
            - PROXY_LISTEN=${KEYCLOAK_PROXY_LISTEN}
            - PROXY_DISCOVERY_URL=${SERVER_PROTOCOL}://${ADDRESS_KEYCLOAK}${KEYCLOAK_PROXY_DISCOVERY_URL_PATH}
            - PROXY_CLIENT_ID=${KEYCLOAK_PROXY_CONSUMER_CLIENT_ID}
            - PROXY_CLIENT_SECRET=DOCKERSECRET:keycloak_proxy_consumer_client_secret
            - PROXY_ENABLE_REFRESH_TOKEN=${KEYCLOAK_PROXY_ENABLE_REFRESH_TOKEN}
            - PROXY_REDIRECTION_URL=${SERVER_PROTOCOL}://${ADDRESS_CONSUMER}/
            - PROXY_ENCRYPTION_KEY=DOCKERSECRET:keycloak_proxy_consumer_encryption_key
            - PROXY_UPSTREAM_URL=http://run-consumer:${INTERNAL_PORT_RUN_CONSUMER}
            - ENV_SECRETS_DEBUG=${ENV_SECRETS_DEBUG}
        networks:
            - ${DOCKER_NETWORK_NAME}
        labels:
            - "traefik.enable=true"
            - "traefik.port=${KEYCLOAK_PROXY_PORT}"
            - "traefik.frontend.rule=Host:${ADDRESS_CONSUMER}"
        entrypoint:
            - /opt/env_secrets_expand.sh
            - --resources=${KEYCLOAK_PROXY_CONSUMER_RESOURCES}
            - --skip-openid-provider-tls-verify=${KEYCLOAK_PROXY_SKIP_OPENID_PROVIDER_TLS_VERIFY}
            - --skip-client-id=${KEYCLOAK_PROXY_SKIP_CLIENT_ID}
            - --enable-encrypted-token=${KEYCLOAK_PROXY_ENABLE_ENCRYPTED_TOKEN}
            - --enable-logging=${KEYCLOAK_PROXY_ENABLE_LOGGING}
        secrets:
            - keycloak_proxy_consumer_client_secret
            - keycloak_proxy_consumer_encryption_key

    run-cas-server:
        build: ./run-cas-server
        image: hl-cas/run-cas-server
        container_name: run-cas-server
        volumes:
            - ./build-cas-server/build:/opt/build
        environment:
            - TZ=${TZ}
            - DATABASE_URL=${DATABASE_URL}
            - DATABASE_USERNAME=${DATABASE_USERNAME}
            - DATABASE_PASSWORD=DOCKERSECRET:database_password
            - ENV_SECRETS_DEBUG=${ENV_SECRETS_DEBUG}
            - EDITOR_ROLES=${CAS_SERVER_EDITOR_ROLES}
            - TRANSLATOR_ROLES=${CAS_SERVER_TRANSLATOR_ROLES}
            - USER_ROLES=${CAS_SERVER_USER_ROLES}
            - ADMIN_ROLES=${CAS_SERVER_ADMIN_ROLES}
            - DOMAIN=${DOMAIN_NAME}
        networks:
            - ${DOCKER_NETWORK_NAME}
        secrets:
            - database_password

    run-cas-client:
        build: ./run-cas-client
        image: hl-cas/run-cas-client
        container_name: run-cas-client
        volumes:
            - ./build-cas-client/build:/build
        environment:
            - TZ=${TZ}
            - INTERNAL_RUN_CAS_SERVER=run-cas-server
            - INTERNAL_PORT_RUN_CAS_SERVER=${INTERNAL_PORT_RUN_CAS_SERVER}
            - INTERNAL_PORT_RUN_CAS_CLIENT=${INTERNAL_PORT_RUN_CAS_CLIENT}
        networks:
            - ${DOCKER_NETWORK_NAME}

    run-consumer:
        build: ./run-consumer
        image: hl-cas/run-consumer
        container_name: run-consumer
        volumes:      
            - ./build-consumer/build:/build
        environment:
            - TZ=${TZ}
            - INTERNAL_PORT_RUN_CONSUMER=${INTERNAL_PORT_RUN_CONSUMER}
        networks:
            - ${DOCKER_NETWORK_NAME}

networks:
    cas-network:
        external: true
